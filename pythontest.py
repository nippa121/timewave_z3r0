import math
import argparse

# ───────────────────────────────────────────────
# Embedded Timewave Data Sets (384 values each)
# ───────────────────────────────────────────────

DATA_TW1 = [0, 0, 0, 2, 7, 4, 3, 2, 6, 8, 13, 5, 26, 25, 24, 15, 13, 16, 14, 19,
17, 24, 20, 25, 63, 60, 56, 55, 47, 53, 36, 38, 39, 43, 39, 35, 22, 24, 22, 21,
29, 30, 27, 26, 26, 21, 23, 19, 57, 62, 61, 55, 57, 57, 35, 50, 40, 29, 28, 26,
50, 51, 52, 61, 60, 60, 42, 42, 43, 43, 42, 41, 45, 41, 46, 23, 35, 34, 21, 21,
19, 51, 40, 49, 29, 29, 31, 40, 36, 33, 29, 26, 30, 16, 18, 14, 66, 64, 64, 56,
53, 57, 49, 51, 47, 44, 46, 47, 56, 51, 53, 25, 37, 30, 31, 28, 30, 36, 35, 22,
28, 32, 27, 32, 34, 35, 52, 49, 48, 51, 51, 53, 40, 43, 42, 26, 30, 28, 55, 41,
53, 52, 51, 47, 61, 64, 65, 39, 41, 41, 22, 21, 23, 43, 41, 38, 24, 22, 24, 14,
17, 19, 52, 50, 47, 42, 40, 42, 26, 27, 27, 34, 38, 33, 44, 44, 42, 41, 40, 37,
33, 31, 26, 44, 34, 38, 46, 44, 44, 36, 37, 34, 36, 36, 36, 38, 43, 38, 27, 26,
30, 32, 37, 29, 50, 49, 48, 29, 37, 36, 10, 19, 17, 24, 20, 25, 53, 52, 50, 53,
57, 55, 34, 44, 45, 13, 9, 5, 34, 26, 32, 31, 41, 42, 31, 32, 30, 21, 19, 23,
43, 36, 31, 47, 45, 43, 47, 62, 52, 41, 36, 38, 46, 47, 40, 43, 42, 42, 36, 38,
43, 53, 52, 53, 47, 49, 48, 47, 41, 44, 15, 11, 19, 51, 40, 49, 23, 23, 25, 34,
30, 27, 7, 4, 4, 32, 22, 32, 68, 70, 66, 68, 79, 71, 43, 45, 41, 38, 40, 41,
24, 25, 23, 35, 33, 38, 43, 50, 48, 18, 17, 26, 34, 38, 33, 38, 40, 41, 34, 31,
30, 33, 33, 35, 28, 23, 22, 26, 30, 26, 75, 77, 71, 62, 63, 63, 37, 40, 41, 49,
47, 51, 32, 37, 33, 49, 47, 44, 32, 38, 28, 38, 39, 37, 22, 20, 17, 44, 50, 40,
32, 33, 33, 40, 44, 39, 32, 32, 40, 39, 34, 41, 33, 33, 32, 32, 38, 36, 22, 20,
20, 12, 13, 10]

DATA_TW2 = DATA_TW1.copy()  # Same as TW1 except in original it has slight variation; simplified here

DATA_TW3 = [0, 0, 0, 1, 4, 3, 2, 2, 4, 4, 7, 2, 8, 12, 15, 12, 14, 14, 9, 11,
11, 14, 14, 17, 21, 24, 26, 32, 32, 36, 33, 37, 40, 33, 24, 14, 20, 20, 24, 20,
23, 25, 26, 24, 25, 21, 19, 15, 25, 29, 31, 36, 39, 41, 32, 32, 24, 26, 25, 26,
29, 32, 31, 19, 38, 42, 35, 29, 25, 20, 15, 11, 15, 16, 20, 15, 19, 21, 19, 15,
16, 22, 22, 29, 27, 27, 24, 28, 29, 29, 20, 18, 10, 13, 10, 14, 21, 26, 29, 29,
36, 37, 38, 33, 35, 35, 34, 30, 30, 27, 26, 17, 15, 7, 8, 14, 18, 15, 10, 14,
15, 19, 20, 22, 25, 28, 28, 30, 33, 33, 33, 34, 37, 36, 35, 32, 31, 27, 31, 27,
32, 33, 33, 31, 38, 43, 42, 42, 40, 40, 34, 31, 25, 23, 20, 24, 19, 18, 11, 10,
8, 4, 3, 1, 6, 14, 26, 32, 31, 29, 26, 23, 23, 20, 20, 18, 23, 24, 23, 27,
24, 20, 14, 17, 12, 10, 8, 2, 9, 12, 11, 12, 14, 16, 18, 21, 26, 27, 26, 26,
28, 28, 31, 26, 30, 32, 33, 28, 28, 26, 17, 15, 11, 10, 6, 5, 10, 14, 17, 24,
25, 30, 26, 29, 31, 23, 13, 2, 11, 14, 21, 20, 26, 31, 28, 22, 19, 11, 5, 3,
8, 13, 16, 22, 26, 29, 23, 26, 21, 26, 28, 32, 34, 36, 34, 36, 39, 42, 39, 37,
37, 36, 35, 35, 37, 36, 38, 31, 33, 33, 28, 21, 19, 22, 19, 23, 21, 21, 18, 22,
23, 23, 14, 12, 4, 7, 4, 8, 17, 24, 29, 31, 40, 43, 42, 35, 35, 33, 30, 24,
26, 25, 26, 19, 19, 13, 14, 20, 24, 21, 16, 20, 21, 25, 26, 28, 31, 34, 31, 30,
30, 27, 24, 22, 23, 20, 17, 12, 9, 3, 11, 11, 20, 25, 29, 31, 37, 41, 39, 38,
35, 34, 31, 31, 28, 29, 29, 36, 32, 32, 26, 26, 25, 22, 17, 11, 12, 16, 24, 26,
28, 29, 29, 29, 32, 32, 31, 28, 32, 32, 30, 33, 31, 28, 23, 27, 23, 22, 16, 12,
9, 8, 3, 0]

DATA_TW4 = DATA_TW3.copy()  # Simplified; same format as TW3 (replace if needed)

DATA_SETS = [DATA_TW1, DATA_TW2, DATA_TW3, DATA_TW4]
SET_NAMES = ["Kelley", "Watkins", "Sheliak", "Huang Ti"]

# ───────────────────────────────────────────────
# Timewave Logic
# ───────────────────────────────────────────────

NUM_POWERS = 64
CALC_PREC = 1000000
DEFAULT_WF = 64

def compute_powers(wave_factor):
    powers = [1.0]
    for _ in range(1, NUM_POWERS):
        powers.append(powers[-1] * wave_factor)
    return powers

def interpolate(y, set_index):
    data = DATA_SETS[set_index]
    i = int(math.fmod(y, 384.0)) % 384
    j = (i + 1) % 384
    z = y - math.floor(y)
    return data[i] if z == 0 else (data[j] - data[i]) * z + data[i]

def timewave_value(x, set_index, wave_factor):
    powers = compute_powers(wave_factor)
    total = 0.0
    i = 0
    while abs(x) >= powers[i]:
        total += powers[i] * interpolate(x / powers[i], set_index)
        i += 1
        if i >= NUM_POWERS:
            break
    i = 0
    last = 0.0
    while True:
        i += 1
        if i > CALC_PREC + 2:
            break
        last = total
        total += interpolate(x * powers[i], set_index) / powers[i]
        if total != 0.0 and total <= last:
            break
    return total / powers[3]

# ───────────────────────────────────────────────
# CLI Interface
# ───────────────────────────────────────────────

def main(argv=None):
    parser = argparse.ArgumentParser(description="Timewave Zero calculator")
    parser.add_argument("dtz", nargs="+", type=float, help="Days from zero point")
    parser.add_argument("--wf", type=int, default=DEFAULT_WF, help="Wave factor (2–10000)")
    args = parser.parse_args(argv)
    if not (2 <= args.wf <= 10000):
        print("Wave factor must be between 2 and 10000.")
        return
    for dtz in args.dtz:
        label = "BEFORE" if dtz >= 0 else "AFTER"
        print("\n%.4f days %s zero point:" % (abs(dtz), label))
        for idx, name in enumerate(SET_NAMES):
            val = timewave_value(dtz, idx, args.wf)
            print("  %-8s: %.10f" % (name, val))

if __name__ == "__main__":
    # Example call
    main(["100", "10", "-5"])
